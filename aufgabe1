package aufgabe2;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.nio.charset.StandardCharsets;

/**
 *
 * @author oliverbittel
 * @since 04.03.2021
 */
public class ArrayFrequencyTable_Test {

    public static void main(String[] args) throws FileNotFoundException, IOException {
        test1();
        test2();
    }

    private static void test1() {
        // Test von add:
        //FrequencyTable tab1 = new ArrayFrequencyTable();
        FrequencyTable tab1 = new LinkedListFrequencyTable();
        tab1.add("das");
        tab1.add("ist");
        tab1.add("ein",2);
        tab1.add("Test");
        tab1.add("Test",2);

        System.out.println("Soll: Test:3");
        System.out.println("Ist:  " + tab1.get(0) + "\n");

        System.out.println("Soll: ein:2");
        System.out.println("Ist:  " + tab1.get(1) + "\n");

        System.out.println("Soll: 2");
        System.out.println("Ist:  " + tab1.get("ein") +  "\n");

        System.out.println("Soll: 1");
        System.out.println("Ist:  " + tab1.get("ist") +  "\n");

        System.out.println("Soll: 3");
        System.out.println("Ist:  " + tab1.get("Test") +  "\n");

        System.out.println("Soll: 0");
        System.out.println("Ist:  " + tab1.get("abc") +  "\n");

        System.out.println("Soll: {Test:3, ein:2, das:1, ist:1, } size = 4");
        System.out.println("Ist:  " + tab1 +  "\n");

        // Test von addAll:
        // FrequencyTable tab2 = new ArrayFrequencyTable();
        FrequencyTable tab2 = new LinkedListFrequencyTable();
        tab2.add("das",2);
        tab2.add("ist",4);
        tab2.add("kurzer");
        tab2.add("Text");
        tab2.add("Test",2);
        tab1.addAll(tab2);
        System.out.println("Soll: {ist:5, Test:5, das:3, ein:2, kurzer:1, Text:1, } size = 6");
        System.out.println("Ist:  " + tab1 +  "\n");

        // Test von collectNMostFrequent:
        tab1.collectNMostFrequent(3, tab2);
        System.out.println("Soll: {ist:5, Test:5, das:3, } size = 3");
        System.out.println("Ist:  " + tab2 +  "\n");
    }

    private static void test2() throws FileNotFoundException, IOException {
        FrequencyTable tab = new LinkedListFrequencyTable();

        long start = System.nanoTime(); // aktuelle Zeit in nsec
        LineNumberReader in;
        in = new LineNumberReader(new FileReader("C:/Prog2/aufgabe2/Kafka_Der_Prozess.txt", StandardCharsets.UTF_8));
        String line;

        // Text einlesen und Häfigkeiten aller Wörter bestimmen:
        while ((line = in.readLine()) != null) {
            String[] wf = line.split("[^a-z^A-Z^ß^ä^ö^ü^Ä^Ö^Ü]+");
            for (String w: wf) {
                if (w.length() == 0 || w.length() == 1)
                    continue;
                //System.out.println(w);
                // Ihr Code:
                tab.add(w);
            }
        }

        long end = System.nanoTime();
        double elapsedTime = (double)(end-start)/1.0e06; // Zeit in msec

        // Ausgabe der 100 häufigsten Wörter:
        System.out.println("100 häufigste Wörter:");
        // Ihr Code
        FrequencyTable tab2 = new LinkedListFrequencyTable();
        tab2.addAll(tab);
        tab.collectNMostFrequent(100, tab2);
        System.out.println("Ist: " + tab2 + "\n");

        System.out.println("");
        System.out.println("Benötigte Zeit in msec: " + elapsedTime);
    }
}


_________________________________________________________________________________


package aufgabe2;
import java.util.Arrays;

/**
 *
 * @author oliverbittel
 */
public abstract class AbstractFrequencyTable implements aufgabe2.FrequencyTable {
    @Override
    public boolean isEmpty() {
        return this.size() == 0;
    }

    @Override
    public void add(String w) {
        add(w, 1);
    }

    @Override
    public void addAll(aufgabe2.FrequencyTable fq) {
        // Ihr Code:
        for (int i = 0; i < fq.size(); i++) {
            Word word = fq.get(i);
            //if (word != null) {
            add(word.getWord(), word.getFrequency());
            //}
        }
    }
    @Override
    public void collectNMostFrequent(int n, FrequencyTable fq) {
        // Ihr Code:
        fq.clear();
        for(int i = 0; i < n; i++){
            
            if(i == size()){
                return;
            }

            Word a = get(i);
            fq.add(a.getWord(), a.getFrequency());
        }
    }

    @Override
    public String toString() {
        StringBuilder s = new StringBuilder("{");
        // Ihr Code:
        for (int i = 0; i < size(); i++) {
            s.append(get(i));
            s.append(", ");
            
        }
        s.append(String.format("} size = %d", size()));
        return s.toString();
    }
}

____________________________________________________________________________

package aufgabe2;

import aufgabe2.AbstractFrequencyTable;
import aufgabe2.Word;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author oliverbittel
 */
public class ArrayFrequencyTable extends AbstractFrequencyTable {

    private int size = 0;
    private Word fqTable[];
    private final int DEFAULT_SIZE = 100;

    public ArrayFrequencyTable() {
        clear();
    }

    @Override
    public int size() {
        return size;
    }

    @Override
    public final void clear() {
        // throw muss auskommentiert werden!
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        // Ihr Code:
        size = 0;
        fqTable = new Word[DEFAULT_SIZE];

    }

    @Override
    public void add(String w, int f) {
        // throw muss auskommentiert werden!
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        // Ihr Code:
        // Prüfe, ob das Wort bereits in der Tabelle existiert
        
        if (size == fqTable.length){
            fqTable = Arrays.copyOf(fqTable, size*2);
        }

        for(int i = 0; i < size(); i++){
            if(get(i).getWord().equals(w)){
                Word a = get(i);
                a.addFrequency(f);
                moveToLeft(i);
                return;
            }
        }
        Word nWord = new Word(w, f);
        fqTable[size] = nWord;
        size ++;
        moveToLeft(size-1);
        }
        /*for (int i = 0; i < size; i++) {
            if (fqTable[i].getWord().equals(w)) {
                // Wort existiert bereits, erhöhe die Häufigkeit
                fqTable[i].addFrequency(f);
                return;
            }
        }

        // Wort existiert nicht, füge es hinzu
        if (size >= fqTable.length) {
            // Vergrößere das Array, wenn notwendig
            Word[] newTable = new Word[size * 2];
            System.arraycopy(fqTable, 0, newTable, 0, size);
            fqTable = newTable;
        }

        fqTable[size] = new Word(w, f);
        size++; */

    @Override
    public Word get(int pos) {
        // throw muss auskommentiert werden!
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        // Ihr Code:
        if (pos >= 0 && pos < size) {
            return fqTable[pos];
        }
        return null;
    }

    @Override
    public int get(String w) {
        // throw muss auskommentiert werden!
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        // Ihr Code:
        for (int i = size()-1; i >= 0; i--) {

            if (w  == fqTable[i].getWord()) {
                return fqTable[i].getFrequency();
            }
        }
        return 0; 
    }


    private void moveToLeft(int pos){
        Word w = fqTable[pos];
        int i = pos-1;
        while(i >= 0 && fqTable[i].getFrequency() < w.getFrequency()) {
            fqTable[i+1] = fqTable[i];
            i--;
        } 
        fqTable[i + 1] = w;
    }
}

_____________________________________________________________________________________

package aufgabe2;

//import aufgabe2.LinkedListFrequencyTable.Node;

/**
 * Klasse für Wörter mit ihren Häufigkeiten.
 * @author oliverbittel
 * @since 31.07.2023
 */
public class Word {
    final private String word;
    private int freqency;

    /**
     * Konstruktor.
     * @param word Wort
     * @param f H&auml;ufgkeit
     */
    public Word(String word, int f) {
        this.word = word;
        this.freqency = f;
    }

    /**
     * Liefert Wort zur&uuml;ck.
     * @return Wort
     */
    public String getWord() {
        return word;
    }

    /**
     * Liefert H&auml;ufgkeit zur&uuml;ck.
     * @return H&auml;ufgkeit
     */
    public int getFrequency() {
        return freqency;
    }

    /**
     * Addiert zur H&auml;ufgkeit f dazu.
     * @param f H&auml;ufgkeits&auml;nderung.
     */
    public void addFrequency(int f) {
        freqency += f;
    }

    @Override
    public String toString() {
        return word + ":" + freqency;
    }
}

